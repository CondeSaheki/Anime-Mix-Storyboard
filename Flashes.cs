using OpenTK.Graphics;
using StorybrewCommon.Scripting;
using StorybrewCommon.Storyboarding;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Saheki;

namespace StorybrewScripts
{
    public class Flashes : StoryboardObjectGenerator
    {
        [Group("General")]
        [Description("Comma separated list of times in milliseconds aka bookmarks")]
        [Configurable] public string ManualOverrideList = string.Empty;
        [Configurable] public double Opacity = 100 * (double)2 / 3;

        [Group("Timing")]
        [Configurable] public int Offset = 0;

        public override void Generate()
        {
            try
            {
                var pixelPath = Path.Combine("sb", "Pixel.png");
                if (!File.Exists(Path.Combine(MapsetPath, pixelPath))) throw new Exception($"{pixelPath} is missing");

                // automatic finishes in kiai disabled, storybrew parsing is cursed.

                // var manualOverrides = ManualOverrideList == string.Empty ? new List<double>() : ManualOverrideList
                //     .Split(',')
                //     .Select(x => (double)int.Parse(x.Trim()) + Offset)
                //     .ToList();
                // // var Helpers.GetBeatmapHitFinishesInKiai(Beatmap, AudioDuration)                
                // var flashes = manualOverrides
                //     .Concat(Helpers.GetBeatmapHitFinishesInKiai(Beatmap, AudioDuration))
                //     .GroupBy(x => x)
                //     .Where(g => g.Count() == 1)
                //     .Select(g => g.Key)
                //     .OrderBy(x => x)
                //     .ToList();

                // var flashes = Helpers.GetHitFinishes(Beatmap);

                var flashes = new List<int>() { 45872,48520,49402,52931,55284,56755,57049,57343,57637,61020,62343,67049,69402,71755,76461,79843,81167,85872,88225,106536,112118,114908,117699,126071,128862,134443,140025,145606,151187,156769,162350,166711,167932,173513,174908,176304,179094,199790,205608,223063,237608,249244,263790,265244,266699,268154,269608,271063,273790,279315,279561,281282,281528,283249,283495,284233,284479,285462,286200,286446,287430,291364,294315,295298,309069,309560,310052,311036,314970,322839,325790,326774,330708,332675,333044,333413,334642,335626,336610,338577,339806,340298,340544,340913,341282,341651,350380,358003,358249,359970,360216,361938,362183,362921,363167,363905,364151,364397,364642,364888,365134,381889,382326,382909,383491,384219,384656,385239,385821,386549,386986,387569,388151,388880,389316,389899,390482,391355,393685,396016,398346,398928,399511,400676,403006,405336,407666,408249,408831,409268,409705,409996,419316,420482,421647,422083,422520,423977,424559,425142,425724,426307,426889,427472,428054,428637,429074,429802,430239,430676,431258,432132,433297,433880,434462,435045,435627,436210,436792,437375,437957,438540,439122,439705,440142,441452,442035,442617,444948,446113,447278,448443,449608,450773,451938,452520,453103,454268,456452,456889,457472,457762,458054,458783,468302,469565,470829,474618,477144,479671,483776,484881,487250,489776,492302,493723,494197,494986,500039,502565,503829,505092,507302,509513,512038,513301,514564,516143,517090,522143,523406,524669,525932,527195,529722,530827,532248,534774,538564,538722,539196,539353,539827,542353,542827,543301,544880,547406,567609,646499,670499,678499,702499,710499,718499,726499,738548,739638,740002,741093,741457,742548,742911,744002,744366,754548,756002,760366,761820,766184,766548,766911,767638,770548,773457,776366,779275,782184,782548,783638,784002,785093,786548,789093,789457,794184,795275,798184,798911,799638,801093,803638,805820,806911,809820,810548,811275,812729,813820,814184,815275,815638,816730,817093,818184,818548,819638,820002,821093,821457,822548,822911,824002,824366,841404,851896,854519,859765,862387,867633,870256,872878,878124,885830,888617,891240,893863,896322,897797,899109,901732,904355,908289,909600,910912,913207,913535,916158,965698,976992,1023878,1029212,1033212,1034545,1045212,1055878,1057545,1061212,1063878,1066545,1072045,1077378,1081212,1082712,1086545,1088045,1091878,1095878,1113151,1118481,1119711,1121430,1123004,1124654,1131229,1137799,1141086,1144374,1147662,1157525,1162456,1162662,1162867,1163072,1164100,1167388,1169031,1169442,1169853,1170059,1170675,1174785,1175607,1176429,1177251,1180538,1182182,1185470,1188757,1190401,1192045,1193689,1193997,1194305,1199454,1200270,1201086,1201698,1202719,1203535,1204147,1205984,1208229,1209045,1210678,1212515,1219045,1225576,1228841,1230270,1238637,1241698,1245168,1248841,1249658,1251698,1255372,1258229,1261494,1264760,1265168,1269453,1270474,1271290,1274556,1277821,1281086,1283943,1300699,1304152,1307605,1310195,1311058,1313648,1314080,1320986,1321418,1326382,1328324,1331562,1333288,1334152,1335231,1336742,1340195,1342137,1342569,1343864,1344296,1345375,1347101,1349044,1350555,1352929,1354008,1355950,1356382,1357461,1358109,1359404,1360267,1360914,1361993,1362844,1365433,1366297,1369750,1370182,1371477,1373203,1376333,1381074,1383755,1384928,1386437,1389118,1390291,1391800,1392973,1394314,1395487,1398839,1405208,1415934,1419789,1421297,1426660,1433196,1434705,1437386,1440068,1441409,1442749,1445431,1448113,1448448,1448783,1449453,1450794,1456157,1458839,1460012,1461520,1464202,1465375,1466716,1485664,1528741,1531049,1533357,1534126,1534895,1537203,1539510,1540280,1540664,1547203,1550280,1551626,1553357,1578746,1603682,1609915,1616150,1628227,1628617,1634850,1640889,1641084 };
                // if (flashes.Count == 0) return;

                foreach (var time in flashes)
                {
                    var flash = GetLayer("").CreateSprite(pixelPath);
                    float scale = 480f / GetMapsetBitmap(pixelPath).Size.Height;
                    var delay = Helpers.Snap(Beatmap, (int)time, 1, 1);
                    flash.ScaleVec(time, scale * (16f / 9f), scale);
                    flash.Color(time, Color4.Black);
                    // flash.Additive(flashes.First());
                    flash.Fade(OsbEasing.OutExpo, time + Offset, time + delay + Offset, Opacity / 100, 0);
                }
            }
            catch (Exception ex)
            {
                Log($"Error: {ex.Message}");
            }
        }
    }
}
